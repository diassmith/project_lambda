{
	"name": "dim_tenure",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_bronze",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_silver",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          RowNumber as string,",
				"          CustomerId as string,",
				"          Surname as string,",
				"          CreditScore as string,",
				"          Geography as string,",
				"          Gender as string,",
				"          Age as integer,",
				"          Tenure as integer,",
				"          Balance as string,",
				"          NumOfProducts as string,",
				"          HasCrCard as string,",
				"          IsActiveMember as string,",
				"          EstimatedSalary as string,",
				"          Exited as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source1",
				"source1 select(mapColumn(",
				"          RowNumber,",
				"          Tenure",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn1 aggregate(groupBy(Tenure,",
				"          Tenure_Group),",
				"     RowNumber = max(RowNumber)) ~> aggregate1",
				"select1 derive(Tenure_Group = iif(Tenure >= 0 && Tenure <= 3, \"0-3\", iif(Tenure >= 4 && Tenure <= 7, \"4-7\", iif(Tenure >= 8 && Tenure <= 11, \"8-11\",\"\")))) ~> derivedColumn1",
				"aggregate1 select(mapColumn(",
				"          Tenure,",
				"          Tenure_Group",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 keyGenerate(output(PK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Tenure,",
				"          Tenure_Group,",
				"          PK",
				"     ),",
				"     partitionBy('dynamicRange', 3,",
				"          Tenure_Group",
				"     )) ~> sink1"
			]
		}
	}
}