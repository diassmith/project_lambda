{
	"name": "dim_geography",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_bronze",
						"type": "DatasetReference"
					},
					"name": "Churn"
				},
				{
					"dataset": {
						"referenceName": "ds_bronze",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_silver",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select2"
				},
				{
					"name": "join1"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "select6"
				},
				{
					"name": "aggregate2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          RowNumber as integer,",
				"          CustomerId as string,",
				"          Surname as string,",
				"          CreditScore as string,",
				"          Geography as string,",
				"          Gender as string,",
				"          Age as string,",
				"          Tenure as string,",
				"          Balance as string,",
				"          NumOfProducts as string,",
				"          HasCrCard as string,",
				"          IsActiveMember as string,",
				"          EstimatedSalary as string,",
				"          Exited as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('hash', 1)) ~> Churn",
				"source(output(",
				"          iso_code as string,",
				"          country as string,",
				"          current_population as string,",
				"          updated_datetime as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source2",
				"select6 aggregate(groupBy(Geography),",
				"     RowNumber = sum(RowNumber),",
				"     partitionBy('hash', 1)) ~> aggregate1",
				"select4 keyGenerate(output(PK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"aggregate1 select(mapColumn(",
				"          Geography",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, select5 join(Geography == country,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          country = Geography,",
				"          iso_code,",
				"          current_population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"aggregate2 select(mapColumn(",
				"          iso_code,",
				"          country,",
				"          current_population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"Churn select(mapColumn(",
				"          RowNumber,",
				"          Geography",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"source2 aggregate(groupBy(iso_code,",
				"          country),",
				"     updated_datetime = max(updated_datetime),",
				"          current_population = max(current_population)) ~> aggregate2",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Geography = country,",
				"          PK",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}