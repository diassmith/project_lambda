{
	"name": "transformdata_silver",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_bronze",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_silver",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          RowNumber as string,",
				"          CustomerId as string,",
				"          Surname as string,",
				"          CreditScore as string,",
				"          Geography as string,",
				"          Gender as string,",
				"          Age as string,",
				"          Tenure as string,",
				"          Balance as string,",
				"          NumOfProducts as integer,",
				"          HasCrCard as integer,",
				"          IsActiveMember as integer,",
				"          EstimatedSalary as string,",
				"          Exited as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('hash', 1)) ~> source1",
				"source1 derive(CrCard = iif(HasCrCard == 0 , -1 , 1),",
				"          ActiveMember = iif(IsActiveMember == 0 , -1 , 1),",
				"          Geography_France = iif(Geography == 'France' , 1 , 0),",
				"          Geography_Spain = iif(Geography == 'Spain' , 1 , 0),",
				"          Geography_Germany = iif(Geography == 'Germany' , 1 , 0),",
				"          Gender_Female = iif(Gender == 'Female' , 1 , 0),",
				"          Gender_Male = iif(Gender == 'Male' , 1 , 0),",
				"     partitionBy('hash', 1)) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          CreditScore,",
				"          Age,",
				"          Tenure,",
				"          Balance,",
				"          NumOfProducts,",
				"          HasCrCard,",
				"          IsActiveMember,",
				"          EstimatedSalary,",
				"          Exited,",
				"          CrCard,",
				"          ActiveMember,",
				"          Geography_France,",
				"          Geography_Spain,",
				"          Geography_Germany,",
				"          Gender_Female,",
				"          Gender_Male",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          CreditScore,",
				"          Age,",
				"          Tenure,",
				"          Balance,",
				"          NumOfProducts,",
				"          HasCrCard,",
				"          IsActiveMember,",
				"          EstimatedSalary,",
				"          Exited,",
				"          CrCard,",
				"          ActiveMember,",
				"          Geography_France,",
				"          Geography_Spain,",
				"          Geography_Germany,",
				"          Gender_Female,",
				"          Gender_Male",
				"     ),",
				"     partitionBy('dynamicRange', 2,",
				"          IsActiveMember",
				"     )) ~> sink1"
			]
		}
	}
}