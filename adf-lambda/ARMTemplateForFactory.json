{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-lambda"
		},
		"lk_adls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlslambda.dfs.core.windows.net/"
		},
		"lk_akv_lambda_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://akv-lambda.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_Geography_bronze_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dim_geography",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Churn": {
										"fileName": "Churn.parquet"
									},
									"source2": {
										"fileName": "Country.parquet"
									},
									"sink1": {
										"Directory": "Dim/geo"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Silver/Dim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dim_geography')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_age_bronze_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dim_age",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"fileName": "Churn.parquet"
									},
									"sink1": {
										"Directory": "Dim/age"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Silver/Dim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dim_age')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_age_silver_gold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference",
								"parameters": {
									"Directory": "Dim/age"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": "Dim/age",
												"wildcardFileName": "*.snappy.parquet",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "MergeFiles"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Age",
														"type": "Int32",
														"physicalType": "INT32"
													},
													"sink": {
														"name": "Age",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "Age_Group",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "Age Group",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "PK",
														"type": "Int64",
														"physicalType": "INT64"
													},
													"sink": {
														"name": "Age ID",
														"physicalType": "INT_64"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_silver",
											"type": "DatasetReference",
											"parameters": {
												"Directory": "Dim/age"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_gold",
											"type": "DatasetReference",
											"parameters": {
												"Directory": "Dim/age",
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Gold/Dim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_silver')]",
				"[concat(variables('factoryId'), '/datasets/ds_gold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dimensions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Geo",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_Geography_bronze_silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					},
					{
						"name": "Gender",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_gender_bronze_silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					},
					{
						"name": "Age",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_age_bronze_silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					},
					{
						"name": "Tenure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait1_copy1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_tenure_bronze_silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Geo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					},
					{
						"name": "Wait1_copy1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Gender",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					},
					{
						"name": "Wait1_copy1_copy1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Age",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					},
					{
						"name": "Wait1_copy1_copy1_copy1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Tenure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					},
					{
						"name": "Surname",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait1_copy1_copy1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_surname_bronze_silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					},
					{
						"name": "Geo_gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait1_copy1_copy1_copy1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_geo_silver_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					},
					{
						"name": "Wait1_copy1_copy1_copy1_copy1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Surname",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					},
					{
						"name": "Wait2",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Geo_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					},
					{
						"name": "gender_gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_gender_silver_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					},
					{
						"name": "Age_gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait2_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_age_silver_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					},
					{
						"name": "Ternure_gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait2_copy1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_tenure_silver_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					},
					{
						"name": "Wait2_copy1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "gender_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					},
					{
						"name": "Wait2_copy1_copy1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Age_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					},
					{
						"name": "Wait2_copy1_copy1_copy1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Ternure_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					},
					{
						"name": "Surname_gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait2_copy1_copy1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_surname_silver_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_Geography_bronze_silver')]",
				"[concat(variables('factoryId'), '/pipelines/pl_gender_bronze_silver')]",
				"[concat(variables('factoryId'), '/pipelines/pl_age_bronze_silver')]",
				"[concat(variables('factoryId'), '/pipelines/pl_tenure_bronze_silver')]",
				"[concat(variables('factoryId'), '/pipelines/pl_surname_bronze_silver')]",
				"[concat(variables('factoryId'), '/pipelines/pl_geo_silver_gold')]",
				"[concat(variables('factoryId'), '/pipelines/pl_gender_silver_gold')]",
				"[concat(variables('factoryId'), '/pipelines/pl_age_silver_gold')]",
				"[concat(variables('factoryId'), '/pipelines/pl_tenure_silver_gold')]",
				"[concat(variables('factoryId'), '/pipelines/pl_surname_silver_gold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_fact')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze to silver",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_fact_silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "silver to gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_fact_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "bronze to silver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_fact_silver')]",
				"[concat(variables('factoryId'), '/pipelines/pl_fact_gold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_fact_gold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "fact_gold",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"Directory": "Fato"
									},
									"Geo": {
										"Directory": "Dim/geo"
									},
									"Age": {
										"Directory": "Dim/age"
									},
									"Gender": {
										"Directory": "Dim/gender"
									},
									"Tenure": {
										"Directory": "Dim/tenure"
									},
									"Surname": {
										"Directory": "Dim/surname"
									},
									"sink1": {
										"Directory": "Fato",
										"FileName": "FactChurn.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Gold/Fact"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fact_gold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_fact_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "RowNumber",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "RowNumber",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CustomerId",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "CustomerId",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Surname",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Surname",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CreditScore",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Credit_Score",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Geography",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Geography",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Gender",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Gender",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Age",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Age",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Tenure",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Tenure",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Balance",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Balance",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "NumOfProducts",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Num_Of_Products",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "HasCrCard",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Has_Crredit_Card",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "IsActiveMember",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Active_Member",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "EstimatedSalary",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Estimated_Salary",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Exited",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Exited",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_bronze",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "Churn.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_silver",
								"type": "DatasetReference",
								"parameters": {
									"Directory": "Fato"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Silver/Fact"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_bronze')]",
				"[concat(variables('factoryId'), '/datasets/ds_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_gender_bronze_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dim_gender",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"fileName": "Churn.parquet"
									},
									"sink1": {
										"Directory": "Dim/gender"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Silver/Dim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dim_gender')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_gender_silver_gold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference",
								"parameters": {
									"Directory": "Dim/gender"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": "Dim/gender",
												"wildcardFileName": "*.snappy.parquet",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Gender",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "Gender",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "PK",
														"type": "Int64",
														"physicalType": "INT64"
													},
													"sink": {
														"name": "PK",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_silver",
											"type": "DatasetReference",
											"parameters": {
												"Directory": "Dim/gender"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_gold",
											"type": "DatasetReference",
											"parameters": {
												"Directory": "Dim/gender",
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Gold/Dim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_silver')]",
				"[concat(variables('factoryId'), '/datasets/ds_gold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_geo_silver_gold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference",
								"parameters": {
									"Directory": "Dim/geo"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": "Dim/geo",
												"wildcardFileName": "*.snappy.parquet",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Country",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "Country",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "IsoCode",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "IsoCode",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "Population",
														"type": "Decimal",
														"physicalType": "DECIMAL",
														"scale": 0,
														"precision": 15
													},
													"sink": {
														"name": "Population",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "Continent",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "Continent",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "IsoContinent",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "IsoContinent",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "PK",
														"type": "Int64",
														"physicalType": "INT64"
													},
													"sink": {
														"name": "PK",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_silver",
											"type": "DatasetReference",
											"parameters": {
												"Directory": "Dim/geo"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_gold",
											"type": "DatasetReference",
											"parameters": {
												"Directory": "Dim/geo",
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Gold/Dim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_silver')]",
				"[concat(variables('factoryId'), '/datasets/ds_gold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_inbound_bronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_source_csv",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_source_csv",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_bronze",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@replace(item().name,'.csv','.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Filter2",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.json')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1_copy1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter2').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_source_json",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_bronze",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@replace(item().name,'.json','.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Bronze"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_bronze')]",
				"[concat(variables('factoryId'), '/datasets/ds_source_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_silver_churn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "transformdata_silver",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"fileName": "Churn.parquet"
									},
									"sink1": {
										"Directory": "Churn"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Silver"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/transformdata_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_surname_bronze_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dim_surname",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Bronze": {
										"fileName": "Churn.parquet"
									},
									"sink1": {
										"Directory": "Dim/surname"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Silver/Dim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dim_surname')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_surname_silver_gold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference",
								"parameters": {
									"Directory": "Dim/surname"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": "Dim/surname",
												"wildcardFileName": "*.snappy.parquet",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "MergeFiles"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_silver",
											"type": "DatasetReference",
											"parameters": {
												"Directory": "Dim/surname"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_gold",
											"type": "DatasetReference",
											"parameters": {
												"Directory": "Dim/surname",
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Gold/Dim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_silver')]",
				"[concat(variables('factoryId'), '/datasets/ds_gold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_tenure_bronze_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dim_tenure",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"fileName": "Churn.parquet"
									},
									"sink1": {
										"Directory": "Dim/tenure"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Silver/Dim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dim_tenure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_tenure_silver_gold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference",
								"parameters": {
									"Directory": "Dim/tenure"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": "Dim/tenure",
												"wildcardFileName": "*.snappy.parquet",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Tenure",
														"type": "Int32",
														"physicalType": "INT32"
													},
													"sink": {
														"name": "Tenure",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "Tenure_Group",
														"type": "String",
														"physicalType": "UTF8"
													},
													"sink": {
														"name": "Tenure_Group",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "PK",
														"type": "Int64",
														"physicalType": "INT64"
													},
													"sink": {
														"name": "PK",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_silver",
											"type": "DatasetReference",
											"parameters": {
												"Directory": "Dim/tenure"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_gold",
											"type": "DatasetReference",
											"parameters": {
												"Directory": "Dim/tenure",
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Gold/Dim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_silver')]",
				"[concat(variables('factoryId'), '/datasets/ds_gold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_bronze')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lk_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"fileSystem": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "RowNumber",
						"type": "UTF8"
					},
					{
						"name": "CustomerId",
						"type": "UTF8"
					},
					{
						"name": "Surname",
						"type": "UTF8"
					},
					{
						"name": "CreditScore",
						"type": "UTF8"
					},
					{
						"name": "Geography",
						"type": "UTF8"
					},
					{
						"name": "Gender",
						"type": "UTF8"
					},
					{
						"name": "Age",
						"type": "UTF8"
					},
					{
						"name": "Tenure",
						"type": "UTF8"
					},
					{
						"name": "Balance",
						"type": "UTF8"
					},
					{
						"name": "NumOfProducts",
						"type": "UTF8"
					},
					{
						"name": "HasCrCard",
						"type": "UTF8"
					},
					{
						"name": "IsActiveMember",
						"type": "UTF8"
					},
					{
						"name": "EstimatedSalary",
						"type": "UTF8"
					},
					{
						"name": "Exited",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lk_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_gold')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lk_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Directory": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": "gold"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lk_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_silver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lk_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lk_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lk_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"fileSystem": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "RowNumber",
						"type": "String"
					},
					{
						"name": "CustomerId",
						"type": "String"
					},
					{
						"name": "Surname",
						"type": "String"
					},
					{
						"name": "CreditScore",
						"type": "String"
					},
					{
						"name": "Geography",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Tenure",
						"type": "String"
					},
					{
						"name": "Balance",
						"type": "String"
					},
					{
						"name": "NumOfProducts",
						"type": "String"
					},
					{
						"name": "HasCrCard",
						"type": "String"
					},
					{
						"name": "IsActiveMember",
						"type": "String"
					},
					{
						"name": "EstimatedSalary",
						"type": "String"
					},
					{
						"name": "Exited",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lk_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lk_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"fileSystem": "inbound"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lk_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lk_adls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('lk_adls_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "lk_akv_lambda",
							"type": "LinkedServiceReference"
						},
						"secretName": "adlskeylambda"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lk_akv_lambda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lk_akv_lambda')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('lk_akv_lambda_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_age')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_bronze",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          RowNumber as string,",
						"          CustomerId as string,",
						"          Surname as string,",
						"          CreditScore as string,",
						"          Geography as string,",
						"          Gender as string,",
						"          Age as integer,",
						"          Tenure as string,",
						"          Balance as string,",
						"          NumOfProducts as string,",
						"          HasCrCard as string,",
						"          IsActiveMember as string,",
						"          EstimatedSalary as string,",
						"          Exited as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 select(mapColumn(",
						"          RowNumber,",
						"          Age",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1 aggregate(groupBy(Age,",
						"          Age_Group),",
						"     RowNumber = max(RowNumber)) ~> aggregate1",
						"select1 derive(Age_Group = iif(Age >= 18 && Age <= 23, \"18-23\", iif(Age >= 24 && Age <= 30, \"24-30\", iif(Age >= 31 && Age <= 35, \"31-35\", iif(Age >= 36 && Age <= 40,\"36-40\", iif(Age >= 41 && Age <= 45, \"41-45\", iif(Age >= 46 && Age <= 50, \"46-50\", iif(Age >= 50  && Age <=55, \"50-55\", iif(Age > 55, \">55\", \"\"))))))))) ~> derivedColumn1",
						"aggregate1 select(mapColumn(",
						"          Age,",
						"          Age_Group",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 keyGenerate(output(PK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Age,",
						"          Age_Group,",
						"          PK",
						"     ),",
						"     partitionBy('dynamicRange', 2,",
						"          Age_Group",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_bronze')]",
				"[concat(variables('factoryId'), '/datasets/ds_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_gender')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_bronze",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          RowNumber as string,",
						"          CustomerId as string,",
						"          Surname as string,",
						"          CreditScore as string,",
						"          Geography as string,",
						"          Gender as string,",
						"          Age as string,",
						"          Tenure as string,",
						"          Balance as string,",
						"          NumOfProducts as string,",
						"          HasCrCard as string,",
						"          IsActiveMember as string,",
						"          EstimatedSalary as string,",
						"          Exited as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 select(mapColumn(",
						"          RowNumber,",
						"          Gender",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(Gender),",
						"     RowNumber = min(RowNumber)) ~> aggregate1",
						"aggregate1 keyGenerate(output(PK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 select(mapColumn(",
						"          Gender,",
						"          PK",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_bronze')]",
				"[concat(variables('factoryId'), '/datasets/ds_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_geography')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_bronze",
								"type": "DatasetReference"
							},
							"name": "Churn"
						},
						{
							"dataset": {
								"referenceName": "ds_bronze",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select2"
						},
						{
							"name": "select6"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select7"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          RowNumber as string,",
						"          CustomerId as string,",
						"          Surname as string,",
						"          CreditScore as string,",
						"          Geography as string,",
						"          Gender as string,",
						"          Age as string,",
						"          Tenure as string,",
						"          Balance as string,",
						"          NumOfProducts as string,",
						"          HasCrCard as string,",
						"          IsActiveMember as string,",
						"          EstimatedSalary as string,",
						"          Exited as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     partitionBy('hash', 1)) ~> Churn",
						"source(output(",
						"          iso_code as string,",
						"          country as string,",
						"          current_population as string,",
						"          updated_datetime as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source2",
						"select6 aggregate(groupBy(Geography),",
						"     RowNumber = max(RowNumber),",
						"     partitionBy('hash', 1)) ~> aggregate1",
						"derivedColumn2 keyGenerate(output(PK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"aggregate1 select(mapColumn(",
						"          Geography",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"Churn select(mapColumn(",
						"          RowNumber,",
						"          Geography",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"derivedColumn1 aggregate(groupBy(country,",
						"          iso_code),",
						"     updated_datetime = max(updated_datetime),",
						"          current_population = max(current_population)) ~> aggregate2",
						"source2 derive(current_population = toDecimal(current_population,15,0,'0,0')) ~> derivedColumn1",
						"select2, select7 join(Geography == country,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"aggregate2 select(mapColumn(",
						"          country,",
						"          iso_code,",
						"          current_population",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"join1 derive(continent = iif(country == \"France\" || country == \"Germany\" || country == \"Spain\"  , \"Europe\",\"\"),",
						"          {alpha-code-continent} = iif(country == \"France\" || country == \"Germany\" || country == \"Spain\"  , \"Eur\",\"\")) ~> derivedColumn2",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Country = Geography,",
						"          IsoCode = iso_code,",
						"          Population = current_population,",
						"          Continent = continent,",
						"          IsoContinent = {alpha-code-continent},",
						"          PK",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_bronze')]",
				"[concat(variables('factoryId'), '/datasets/ds_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_surname')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_bronze",
								"type": "DatasetReference"
							},
							"name": "Bronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          RowNumber as string,",
						"          CustomerId as string,",
						"          Surname as string,",
						"          CreditScore as integer,",
						"          Geography as string,",
						"          Gender as string,",
						"          Age as string,",
						"          Tenure as string,",
						"          Balance as string,",
						"          NumOfProducts as string,",
						"          HasCrCard as string,",
						"          IsActiveMember as string,",
						"          EstimatedSalary as integer,",
						"          Exited as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Bronze",
						"Bronze select(mapColumn(",
						"          Surname,",
						"          CreditScore,",
						"          EstimatedSalary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(Surname),",
						"     CreditScore = sum(CreditScore),",
						"          EstimatedSalary = sum(EstimatedSalary)) ~> aggregate1",
						"aggregate1 keyGenerate(output(PK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_bronze')]",
				"[concat(variables('factoryId'), '/datasets/ds_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_tenure')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_bronze",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          RowNumber as string,",
						"          CustomerId as string,",
						"          Surname as string,",
						"          CreditScore as string,",
						"          Geography as string,",
						"          Gender as string,",
						"          Age as integer,",
						"          Tenure as integer,",
						"          Balance as string,",
						"          NumOfProducts as string,",
						"          HasCrCard as string,",
						"          IsActiveMember as string,",
						"          EstimatedSalary as string,",
						"          Exited as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 select(mapColumn(",
						"          RowNumber,",
						"          Tenure",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1 aggregate(groupBy(Tenure,",
						"          Tenure_Group),",
						"     RowNumber = max(RowNumber)) ~> aggregate1",
						"select1 derive(Tenure_Group = iif(Tenure >= 0 && Tenure <= 3, \"0-3\", iif(Tenure >= 4 && Tenure <= 7, \"4-7\", iif(Tenure >= 8 && Tenure <= 11, \"8-11\",\"\")))) ~> derivedColumn1",
						"aggregate1 select(mapColumn(",
						"          Tenure,",
						"          Tenure_Group",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 keyGenerate(output(PK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Tenure,",
						"          Tenure_Group,",
						"          PK",
						"     ),",
						"     partitionBy('dynamicRange', 3,",
						"          Tenure_Group",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_bronze')]",
				"[concat(variables('factoryId'), '/datasets/ds_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fact_gold')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference"
							},
							"name": "Geo"
						},
						{
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference"
							},
							"name": "Age"
						},
						{
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference"
							},
							"name": "Gender"
						},
						{
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference"
							},
							"name": "Tenure"
						},
						{
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference"
							},
							"name": "Surname"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_gold",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "joinGeo"
						},
						{
							"name": "select2"
						},
						{
							"name": "joinAge"
						},
						{
							"name": "joinGender"
						},
						{
							"name": "joinTunure"
						},
						{
							"name": "joinSurname"
						}
					],
					"scriptLines": [
						"source(output(",
						"          RowNumber as integer,",
						"          CustomerId as string,",
						"          Surname as string,",
						"          Credit_Score as string,",
						"          Geography as string,",
						"          Gender as string,",
						"          Age as string,",
						"          Tenure as integer,",
						"          Balance as double,",
						"          Num_Of_Products as integer,",
						"          Has_Crredit_Card as integer,",
						"          Active_Member as integer,",
						"          Estimated_Salary as string,",
						"          Exited as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source(output(",
						"          Country as string,",
						"          IsoCode as string,",
						"          Population as decimal(15,0),",
						"          Continent as string,",
						"          IsoContinent as string,",
						"          PK as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Geo",
						"source(output(",
						"          Age as string,",
						"          Age_Group as string,",
						"          PK as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Age",
						"source(output(",
						"          Gender as string,",
						"          PK as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Gender",
						"source(output(",
						"          Tenure as integer,",
						"          Tenure_Group as string,",
						"          PK as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Tenure",
						"source(output(",
						"          Surname as string,",
						"          CreditScore as long,",
						"          EstimatedSalary as long,",
						"          PK as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     partitionBy('hash', 1)) ~> Surname",
						"source1 select(mapColumn(",
						"          RowNumber,",
						"          {Customer Id} = CustomerId,",
						"          Surname,",
						"          {Credit Score} = Credit_Score,",
						"          Geography,",
						"          Gender,",
						"          Age,",
						"          Tenure,",
						"          Balance,",
						"          {Num Of Products} = Num_Of_Products,",
						"          {Has Credit Card} = Has_Crredit_Card,",
						"          {Active Member} = Active_Member,",
						"          {Estimated Salary} = Estimated_Salary,",
						"          Exited",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, Geo join(Geography == Country,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinGeo",
						"joinSurname select(mapColumn(",
						"          RowNumber,",
						"          CustomerId = {Customer Id},",
						"          Surname = select1@Surname,",
						"          CreditScore = {Credit Score},",
						"          Country = Geography,",
						"          Gender = select1@Gender,",
						"          Age = select1@Age,",
						"          Tenure = select1@Tenure,",
						"          Balance,",
						"          NumOfProducts = {Num Of Products},",
						"          HasCreditCard = {Has Credit Card},",
						"          ActiveMember = {Active Member},",
						"          EstimatedSalary = {Estimated Salary},",
						"          Exited,",
						"          sk_geo = Geo@PK,",
						"          sk_age = Age@PK,",
						"          sk_gender = Gender@PK,",
						"          sk_surname = Surname@PK",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"joinGeo, Age join(select1@Age == Age@Age,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinAge",
						"joinAge, Gender join(select1@Gender == Gender@Gender,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinGender",
						"joinGender, Tenure join(select1@Tenure == Tenure@Tenure,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinTunure",
						"joinTunure, Surname join(select1@Surname == Surname@Surname,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSurname",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CustomerId,",
						"          Surname,",
						"          CreditScore,",
						"          Country,",
						"          Gender,",
						"          Age,",
						"          Tenure,",
						"          Balance,",
						"          NumOfProducts,",
						"          HasCreditCard,",
						"          ActiveMember,",
						"          EstimatedSalary,",
						"          Exited,",
						"          sk_geo,",
						"          sk_age,",
						"          sk_gender,",
						"          sk_surname",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_silver')]",
				"[concat(variables('factoryId'), '/datasets/ds_gold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformdata_silver')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_bronze",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_silver",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          RowNumber as string,",
						"          CustomerId as string,",
						"          Surname as string,",
						"          CreditScore as string,",
						"          Geography as string,",
						"          Gender as string,",
						"          Age as string,",
						"          Tenure as string,",
						"          Balance as string,",
						"          NumOfProducts as integer,",
						"          HasCrCard as integer,",
						"          IsActiveMember as integer,",
						"          EstimatedSalary as string,",
						"          Exited as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 derive(CrCard = iif(HasCrCard == 0 , -1 , 1),",
						"          ActiveMember = iif(IsActiveMember == 0 , -1 , 1),",
						"          Geography_France = iif(Geography == 'France' , 1 , 0),",
						"          Geography_Spain = iif(Geography == 'Spain' , 1 , 0),",
						"          Geography_Germany = iif(Geography == 'Germany' , 1 , 0),",
						"          Gender_Female = iif(Gender == 'Female' , 1 , 0),",
						"          Gender_Male = iif(Gender == 'Male' , 1 , 0),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          CreditScore,",
						"          Age,",
						"          Tenure,",
						"          Balance,",
						"          NumOfProducts,",
						"          HasCrCard,",
						"          IsActiveMember,",
						"          EstimatedSalary,",
						"          Exited,",
						"          CrCard,",
						"          ActiveMember,",
						"          Geography_France,",
						"          Geography_Spain,",
						"          Geography_Germany,",
						"          Gender_Female,",
						"          Gender_Male",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CreditScore,",
						"          Age,",
						"          Tenure,",
						"          Balance,",
						"          NumOfProducts,",
						"          HasCrCard,",
						"          IsActiveMember,",
						"          EstimatedSalary,",
						"          Exited,",
						"          CrCard,",
						"          ActiveMember,",
						"          Geography_France,",
						"          Geography_Spain,",
						"          Geography_Germany,",
						"          Gender_Female,",
						"          Gender_Male",
						"     ),",
						"     partitionBy('dynamicRange', 2,",
						"          IsActiveMember",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_bronze')]",
				"[concat(variables('factoryId'), '/datasets/ds_silver')]"
			]
		}
	]
}